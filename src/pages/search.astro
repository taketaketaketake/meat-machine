---
// src/pages/search.astro
import Layout from '../components/astro/layout.astro';
import '../styles/global.css';

// --- Dynamic Data & Edge Case Handling ---

// 1. Get the search query from the URL.
const searchQuery = Astro.url.searchParams.get('q');

// 2. FIX: If there is no search query, redirect to the homepage to prevent an empty state.
if (!searchQuery) {
    return Astro.redirect('/');
}

// 3. FIX: Simulate a real API call. This would be replaced with your actual backend logic.
async function getSearchResults(query: string) {
    // In a real application, you would use the `query` parameter to filter your database.
    // For this design mock, we'll return hardcoded data.
    console.log(`Simulating search for: ${query}`);
    return {
        creators: [
            { id: 2, handle: '@detroitdabs', name: 'Detroit Dabs', avatarEmoji: 'üåø', bio: "Exploring the world of cannabis with a focus on education, strain reviews, and responsible consumption." },
            { id: 3, handle: '@exploredetroit', name: 'Explore Detroit', avatarEmoji: 'üèôÔ∏è', bio: "Showcasing the art, culture, and hidden gems of Detroit." }
        ],
        content: [
            { id: 1, title: 'Downtown Detroit Dispensary Tour', description: 'A guided tour of the top-rated cannabis dispensaries in the heart of the city.', creator: 'Detroit Dabs', type: 'video', tags: ['cannabis', 'tour', 'detroit'] },
            { id: 2, title: 'Top 5 Detroit Coffee Shops', description: 'From cozy corners to bustling cafes, here are the must-visit coffee spots in Detroit.', creator: 'Motor City Muncher', type: 'video', tags: ['food', 'coffee', 'detroit'] },
            { id: 3, title: 'Detroit Riverfront Photowalk', description: 'A collection of stunning, high-resolution photographs taken along the iconic Detroit riverfront at sunset.', creator: 'Explore Detroit', type: 'image', tags: ['photography', 'cityscape', 'detroit'] },
        ]
    };
    // To test the "no results" case, you could return this instead:
    // return { creators: [], content: [] };
}

const results = await getSearchResults(searchQuery);

// 4. FIX: Calculate boolean flags to make the template logic cleaner.
const hasCreators = results.creators.length > 0;
const hasContent = results.content.length > 0;
const noResultsFound = !hasCreators && !hasContent;
---

<Layout title={`Search Results for "${searchQuery}"`} description={`Find content and creators related to ${searchQuery} on Meat.`}>
    <div class="max-w-5xl mx-auto px-4 py-8 md:py-16">
        <header class="mb-12">
            <p class="text-sm font-semibold text-pink-500">Search Results</p>
            <h1 class="font-display text-4xl md:text-5xl font-bold text-white truncate" title={searchQuery}>"{searchQuery}"</h1>
        </header>

        <!-- FIX: A dedicated state for when no results are found at all. -->
        {noResultsFound && (
            <div class="text-center py-16 bg-gray-900/50 border border-gray-800 rounded-xl">
                <p class="text-2xl text-gray-400 mb-2">No results found.</p>
                <p class="text-gray-500">Try searching for something else or check your spelling.</p>
            </div>
        )}

        <div class="space-y-12">
            <!-- FIX: Creators section only renders if there are creator results. -->
            {hasCreators && (
                <section>
                    <h2 class="text-2xl font-bold text-white mb-6 border-l-4 border-purple-500 pl-4">Creators</h2>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <!-- Creator Card HTML is now inlined inside the loop -->
                        {results.creators.map(creator => (
                            <a href={`/creator/${creator.handle.substring(1)}`} class="group bg-gray-900 border border-gray-800 rounded-xl p-4 flex items-center gap-4 hover:border-purple-500/50 hover:-translate-y-1 transition-all duration-300">
                                <div class="w-16 h-16 rounded-full bg-gray-800 border-2 border-gray-700 flex items-center justify-center text-3xl shadow-lg flex-shrink-0">
                                    {creator.avatarEmoji}
                                </div>
                                <div class="flex-grow overflow-hidden">
                                    <h3 class="font-bold text-white group-hover:text-purple-400 transition-colors">{creator.name}</h3>
                                    <p class="text-sm text-gray-400">{creator.handle}</p>
                                    <p class="text-xs text-gray-500 mt-1 truncate">{creator.bio}</p>
                                </div>
                            </a>
                        ))}
                    </div>
                </section>
            )}

            <!-- FIX: Content section only renders if there are content results. -->
            {hasContent && (
                <section>
                    <h2 class="text-2xl font-bold text-white mb-6 border-l-4 border-cyan-500 pl-4">Creations</h2>
                    <div class="space-y-6">
                        <!-- Content Card HTML is now inlined inside the loop -->
                        {results.content.map(item => (
                             <a href={`/content/${item.id}`} class="group bg-gray-900 border border-gray-800 rounded-xl p-4 flex items-start gap-6 hover:border-cyan-500/50 hover:bg-gray-800/50 transition-all duration-300">
                                <div class="w-32 h-20 md:w-40 md:h-24 rounded-lg bg-gray-800 flex items-center justify-center text-2xl text-gray-500 flex-shrink-0">
                                    {item.type === 'video' ? 'üé¨' : 'üñºÔ∏è'}
                                </div>
                                <div class="flex-grow pt-1 overflow-hidden">
                                    <h3 class="font-bold text-white truncate group-hover:text-cyan-400 transition-colors">{item.title}</h3>
                                    <p class="text-sm text-gray-500 mb-2">by {item.creator}</p>
                                    <p class="text-sm text-gray-400 leading-relaxed line-clamp-2">{item.description}</p>
                                    <div class="flex flex-wrap gap-2 mt-3">
                                        {item.tags.map(tag => (
                                            <span class="text-xs bg-gray-800 text-gray-300 px-2 py-1 rounded-full whitespace-nowrap">#{tag}</span>
                                        ))}
                                    </div>
                                </div>
                             </a>
                        ))}
                    </div>
                </section>
            )}
        </div>
    </div>
</Layout>

<style>
  .font-display { font-family: 'Playfair Display', serif; }
</style>
