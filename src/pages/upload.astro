---
// src/pages/create.astro
import Layout from '../components/astro/layout.astro';
import '../styles/global.css';

// This page is self-contained and uses hardcoded values for UI elements.
---
<Layout title="Create - Meat" description="Create and share your next AI-generated masterpiece.">
  <div class="max-w-7xl mx-auto px-4 py-8 md:py-16">
    <header class="mb-12">
      <h1 class="font-display text-4xl md:text-5xl font-bold text-white">Share Your Creation</h1>
      <p class="text-lg text-gray-400 mt-2">Bring your AI-generated art to the community.</p>
    </header>

    <form id="creation-form" class="grid grid-cols-1 lg:grid-cols-5 gap-12">
      
      <div class="lg:col-span-3">
        <div id="creation-tabs">
          <div class="border-b border-gray-700">
            <div role="tablist" aria-label="Creation Method" class="-mb-px flex gap-6">
              <button type="button" role="tab" id="tab-upload" aria-selected="true" aria-controls="panel-upload" class="tab-btn is-active">Upload File</button>
              <button type="button" role="tab" id="tab-generate" aria-selected="false" aria-controls="panel-generate" class="tab-btn">Generate with AI</button>
            </div>
          </div>

          <div class="pt-8">
            <div role="tabpanel" id="panel-upload" aria-labelledby="tab-upload" class="tab-panel is-active">
              <div id="file-upload-ui">
                <div id="file-drop-zone" class="relative block w-full rounded-lg border-2 border-dashed border-gray-700 p-12 text-center hover:border-gray-500">
                  <svg class="mx-auto h-12 w-12 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M12 16.5V9.75m0 0l3 3m-3-3l-3 3M6.75 19.5a4.5 4.5 0 01-1.41-8.775 5.25 5.25 0 0110.233-2.33 3 3 0 013.758 3.848A3.752 3.752 0 0118 19.5H6.75z" />
                  </svg>
                  <span class="mt-4 block text-sm font-semibold text-white">Drag & drop your file here</span>
                  <span class="mt-1 block text-xs text-gray-400">or</span>
                  <button type="button" id="browse-files-btn" class="mt-2 text-sm font-semibold text-pink-500 hover:text-pink-400">
                    browse files
                  </button>
                  <input type="file" name="fileUpload" id="file-input" class="absolute inset-0 w-full h-full opacity-0 cursor-pointer" hidden>
                  <p class="mt-4 text-xs text-gray-500">Supports: JPG, PNG, GIF, MP4, MP3</p>
                </div>
                <div id="file-preview" class="hidden relative w-full rounded-lg border-2 border-gray-700 p-6 text-center bg-gray-900">
                  <p class="font-semibold text-white">File Selected:</p>
                  <p id="file-name" class="text-sm text-pink-400 mt-1"></p>
                  <button type="button" id="remove-file-btn" class="mt-4 text-xs font-semibold text-gray-400 hover:text-white">Remove file</button>
                </div>
              </div>
            </div>

            <div role="tabpanel" id="panel-generate" aria-labelledby="tab-generate" class="tab-panel" hidden>
              <div class="space-y-6">
                <div>
                    <label for="ai-model" class="block text-sm font-medium text-gray-300 mb-2">Select AI Model</label>
                    <select name="aiModel" id="ai-model" class="block w-full pl-3 pr-10 py-2 bg-gray-900 border border-gray-700 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-pink-500 focus:border-transparent">
                      <option>Midjourney</option>
                      <option>Sora</option>
                      <option>Suno</option>
                      <option>ElevenLabs</option>
                      <option>Custom Model</option>
                    </select>
                </div>
                <div>
                  <label for="generate-prompt" class="block text-sm font-medium text-gray-300 mb-2">Prompt</label>
                  <textarea name="generatePrompt" id="generate-prompt" rows="6" class="block w-full px-3 py-2 bg-gray-900 border border-gray-700 rounded-lg text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-pink-500" placeholder="A futuristic cityscape at dusk, synthwave style..."></textarea>
                </div>
                <button type="button" class="w-full h-11 flex items-center justify-center rounded-lg bg-pink-600 text-white font-semibold hover:bg-pink-500 transition-colors">
                  Generate
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="lg:col-span-2">
        <div class="space-y-8">
          <div class="space-y-4">
            <div>
              <label for="title" class="block text-sm font-bold text-gray-300 mb-2">Title</label>
              <input type="text" name="title" id="title" class="block w-full h-11 px-4 bg-gray-900 border border-gray-700 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-pink-500" placeholder="e.g., Cybernetic Serenity" required>
            </div>
            <div>
              <label for="description" class="block text-sm font-bold text-gray-300 mb-2">Description</label>
              <textarea name="description" id="description" rows="4" class="block w-full px-4 py-3 bg-gray-900 border border-gray-700 rounded-lg text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-pink-500"></textarea>
            </div>
          </div>

          <div class="bg-gray-900 border border-gray-800 rounded-xl p-6">
            <h3 class="text-lg font-bold text-white">Behind the Curtain</h3>
            <p class="text-sm text-gray-400 mb-6">Help the community learn by sharing your process.</p>
            <div class="space-y-4">
              <div>
                <label for="tools-used" class="block text-xs font-medium text-gray-400 mb-1">Model / Tool Used</label>
                <input type="text" name="toolsUsed" id="tools-used" class="block w-full h-10 px-3 bg-gray-800 border border-gray-700 rounded-lg text-white text-sm" placeholder="e.g., Midjourney v6.0">
              </div>
              <div>
                <label for="prompt-details" class="block text-xs font-medium text-gray-400 mb-1">Primary Prompt</label>
                <textarea name="promptDetails" id="prompt-details" rows="3" class="block w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white text-sm placeholder-gray-500" placeholder="The core prompt you used to generate the content."></textarea>
              </div>
               <div>
                <label for="parameters" class="block text-xs font-medium text-gray-400 mb-1">Parameters & Settings</label>
                <input type="text" name="parameters" id="parameters" class="block w-full h-10 px-3 bg-gray-800 border border-gray-700 rounded-lg text-white text-sm" placeholder="e.g., --ar 16:9 --style raw">
              </div>
            </div>
          </div>
          
          <div class="flex items-center gap-4 pt-4">
            <button type="submit" name="action" value="publish" class="w-full h-12 flex items-center justify-center rounded-lg bg-pink-600 text-white font-semibold hover:bg-pink-500 transition-colors shadow-lg shadow-pink-500/10">Publish Creation</button>
            <button type="submit" name="action" value="draft" class="h-12 px-6 text-sm font-semibold text-gray-400 hover:text-white transition-colors">Save Draft</button>
          </div>
        </div>
      </div>
    </form>
  </div>
</Layout>

<style>
  .font-display { font-family: 'Playfair Display', serif; }
  
  .tab-btn { @apply shrink-0 border-b-2 px-1 pb-3 text-sm font-medium border-transparent text-gray-400; }
  .tab-btn:hover { @apply border-gray-500 text-gray-200; }
  .tab-btn.is-active { @apply border-pink-500 text-pink-500; }
  
  .tab-panel { display: none; }
  .tab-panel.is-active { display: block; }

  #file-drop-zone.drag-over {
    @apply bg-pink-500/10 border-pink-500/50;
  }
</style>

<script>
  // FIX: This script now manages the entire page's interactivity in a structured way.
  class CreatePageController {
    constructor(formId) {
      this.form = document.getElementById(formId);
      if (!this.form) return;

      this.initTabs();
      this.initFileUpload();
      this.initFormSubmit();
    }

    initTabs() {
      const tabContainer = this.form.querySelector('#creation-tabs');
      const tabs = Array.from(tabContainer.querySelectorAll('[role="tab"]'));
      const panels = Array.from(tabContainer.querySelectorAll('[role="tabpanel"]'));
      
      tabs.forEach(tab => {
        tab.addEventListener('click', (e) => {
          e.preventDefault();
          const clickedTab = e.currentTarget;

          tabs.forEach(t => t.setAttribute('aria-selected', 'false'));
          clickedTab.setAttribute('aria-selected', 'true');
          
          const controlsPanelId = clickedTab.getAttribute('aria-controls');
          panels.forEach(p => {
            p.hidden = p.id !== controlsPanelId;
          });
        });
      });
    }

    initFileUpload() {
      const dropZone = this.form.querySelector('#file-drop-zone');
      const fileInput = this.form.querySelector('#file-input');
      const browseBtn = this.form.querySelector('#browse-files-btn');
      const previewUI = this.form.querySelector('#file-upload-ui');
      
      browseBtn.addEventListener('click', () => fileInput.click());

      dropZone.addEventListener('dragover', e => {
        e.preventDefault();
        dropZone.classList.add('drag-over');
      });
      dropZone.addEventListener('dragleave', e => dropZone.classList.remove('drag-over'));
      dropZone.addEventListener('drop', e => {
        e.preventDefault();
        dropZone.classList.remove('drag-over');
        if (e.dataTransfer.files.length) {
          fileInput.files = e.dataTransfer.files;
          this.handleFileSelect(e.dataTransfer.files[0]);
        }
      });
      fileInput.addEventListener('change', e => {
        if (e.target.files.length) {
          this.handleFileSelect(e.target.files[0]);
        }
      });

      previewUI.querySelector('#remove-file-btn').addEventListener('click', () => {
        fileInput.value = ''; // Clear the file input
        previewUI.querySelector('#file-drop-zone').hidden = false;
        previewUI.querySelector('#file-preview').hidden = true;
      });
    }
    
    handleFileSelect(file) {
        const previewUI = this.form.querySelector('#file-upload-ui');
        previewUI.querySelector('#file-name').textContent = file.name;
        previewUI.querySelector('#file-drop-zone').hidden = true;
        previewUI.querySelector('#file-preview').hidden = false;
    }

    initFormSubmit() {
      this.form.addEventListener('submit', e => {
        e.preventDefault();
        
        const formData = new FormData(this.form);
        // The clicked button's value ('publish' or 'draft') is included.
        const action = e.submitter.value;
        formData.append('action', action);
        
        // Convert FormData to a plain object to log it
        const data = Object.fromEntries(formData.entries());

        console.log(`Form submitted for action: ${action}`);
        console.log('Collected Data:', data);
        
        // In a real app, you would now send this `data` object to your API endpoint.
        // For example:
        // fetch('/api/creations', {
        //   method: 'POST',
        //   headers: { 'Content-Type': 'application/json' },
        //   body: JSON.stringify(data)
        // })
        alert(`Form ready to be submitted for "${action}"! Check the console for data.`);
      });
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    new CreatePageController('creation-form');
  });
</script>
